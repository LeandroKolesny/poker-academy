#!/usr/bin/env python3
"""
Script para reconstru√ß√£o SEGURA sem perder dados
"""

import paramiko
import time
from datetime import datetime

SSH_HOST = "142.93.206.128"
SSH_USER = "root"
SSH_PASSWORD = "DojoShh159357"
SSH_PORT = 22

def execute_command(client, command, timeout=60):
    """Executa um comando via SSH"""
    stdin, stdout, stderr = client.exec_command(command, timeout=timeout)
    time.sleep(2)
    output = stdout.read().decode('utf-8')
    error = stderr.read().decode('utf-8')
    return output, error

def rebuild():
    """Reconstr√≥i de forma segura"""
    
    try:
        print("üîå Conectando ao servidor SSH...")
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(SSH_HOST, port=SSH_PORT, username=SSH_USER, password=SSH_PASSWORD, timeout=10)
        print("‚úÖ Conectado ao servidor SSH!\n")
        
        # Passo 1: Fazer backup dos dados
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        print(f"üìù Passo 1: Fazendo backup dos dados ({timestamp})...")
        
        # Backup do banco de dados
        backup_cmd = f"""docker exec 0b2a94fd276e_poker_mysql mysqldump -u poker_user -pDojo@Sql159357 poker_academy > /root/Dojo_Deploy/poker_academy_backup_{timestamp}.sql"""
        output, error = execute_command(client, backup_cmd)
        print("‚úÖ Backup do banco de dados feito!\n")
        
        # Backup dos uploads
        backup_uploads = f"""tar -czf /root/Dojo_Deploy/uploads_backup_{timestamp}.tar.gz /root/Dojo_Deploy/poker-academy-backend/poker_academy_api/uploads/ 2>/dev/null"""
        output, error = execute_command(client, backup_uploads)
        print("‚úÖ Backup dos uploads feito!\n")
        
        # Passo 2: Parar containers (SEM remover volumes)
        print("üìù Passo 2: Parando containers (mantendo volumes)...")
        output, error = execute_command(client, "cd /root/Dojo_Deploy/poker-academy && docker-compose down")
        print("‚úÖ Containers parados!\n")
        
        # Passo 3: Remover APENAS imagens (n√£o volumes!)
        print("üìù Passo 3: Removendo imagens antigas...")
        execute_command(client, "docker rmi -f poker-academy_frontend:latest poker-academy_backend:latest 2>/dev/null || true")
        print("‚úÖ Imagens removidas!\n")
        
        # Passo 4: Reconstruir imagens
        print("üìù Passo 4: Reconstruindo imagens...")
        output, error = execute_command(client, "cd /root/Dojo_Deploy/poker-academy && docker-compose build --no-cache", timeout=600)
        print("‚úÖ Build conclu√≠do!\n")
        
        # Passo 5: Iniciar containers
        print("üìù Passo 5: Iniciando containers...")
        output, error = execute_command(client, "cd /root/Dojo_Deploy/poker-academy && docker-compose up -d")
        print(output)
        
        # Aguardar
        print("\n‚è≥ Aguardando containers iniciarem (120 segundos)...")
        time.sleep(120)
        
        # Passo 6: Verificar status
        print("\nüìù Passo 6: Verificando status...")
        output, error = execute_command(client, "docker ps")
        print(output)
        
        # Passo 7: Verificar dados
        print("\nüìù Passo 7: Verificando integridade dos dados...")
        output, error = execute_command(client, "ls -lh /root/Dojo_Deploy/poker-academy-backend/poker_academy_api/uploads/videos/ 2>/dev/null | head -5")
        print(output if output else "Diret√≥rio de uploads OK")
        
        # Passo 8: Verificar logs
        print("\nüìù Passo 8: Verificando logs...")
        output, error = execute_command(client, "cd /root/Dojo_Deploy/poker-academy && docker-compose logs 2>&1 | tail -50")
        print(output)
        
        client.close()
        
        print("\n" + "=" * 70)
        print("‚úÖ RECONSTRU√á√ÉO SEGURA CONCLU√çDA!")
        print("=" * 70)
        print(f"\nüì¶ Backups criados:")
        print(f"  - Banco de dados: /root/Dojo_Deploy/poker_academy_backup_{timestamp}.sql")
        print(f"  - Uploads: /root/Dojo_Deploy/uploads_backup_{timestamp}.tar.gz")
        print("\nüéâ PR√ìXIMOS PASSOS:")
        print("  1. Aguarde 120 segundos para a aplica√ß√£o iniciar completamente")
        print("  2. Acesse https://cardroomgrinders.com.br")
        print("  3. Fa√ßa login com admin/admin123")
        print("  4. V√° para 'Gest√£o de Aulas'")
        print("  5. Tente editar uma aula existente")
        print("  6. Verifique se as categorias aparecem no dropdown:")
        print("     ‚úì Iniciante")
        print("     ‚úì Pr√©-Flop")
        print("     ‚úì P√≥s-Flop")
        print("     ‚úì Mental Games")
        print("     ‚úì ICM")
        print("\n" + "=" * 70)
        
    except Exception as e:
        print(f"\n‚ùå Erro: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("=" * 70)
    print("Reconstru√ß√£o SEGURA - Poker Academy")
    print("=" * 70)
    print(f"\nServidor: {SSH_HOST}")
    print("\nEste script ir√°:")
    print("  1. ‚úÖ Fazer backup do banco de dados")
    print("  2. ‚úÖ Fazer backup dos uploads")
    print("  3. ‚úÖ Parar containers (mantendo volumes)")
    print("  4. ‚úÖ Remover apenas imagens")
    print("  5. ‚úÖ Reconstruir imagens")
    print("  6. ‚úÖ Iniciar containers")
    print("  7. ‚úÖ Verificar integridade dos dados")
    print("\n‚ö†Ô∏è  IMPORTANTE: Nenhum dado ser√° perdido!")
    print("\n" + "=" * 70)
    
    response = input("\nTem certeza? Digite 'SIM' para continuar: ")
    
    if response.upper() == "SIM":
        rebuild()
    else:
        print("Opera√ß√£o cancelada!")

