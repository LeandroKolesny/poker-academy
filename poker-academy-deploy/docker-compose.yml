version: '3.8'

services:
  # Banco de dados MySQL
  mysql:
    image: mysql:8.0
    container_name: poker_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-poker_academy_2025}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-poker_academy}
      MYSQL_USER: ${MYSQL_USER:-poker_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-poker_pass_2025}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - poker_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend Flask
  backend:
    build:
      context: ./poker-academy-backend
      dockerfile: Dockerfile
    container_name: poker_backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER:-poker_user}:${MYSQL_PASSWORD:-poker_pass_2025}@mysql:3306/${MYSQL_DATABASE:-poker_academy}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      - CORS_ORIGINS=http://localhost,http://127.0.0.1,http://frontend
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - poker_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React + NGINX
  frontend:
    build:
      context: ./poker-academy
      dockerfile: Dockerfile
    container_name: poker_frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - poker_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Reverse Proxy (opcional - para SSL/dom√≠nio)
  nginx-proxy:
    image: nginx:alpine
    container_name: poker_nginx_proxy
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
    networks:
      - poker_network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  poker_network:
    driver: bridge
